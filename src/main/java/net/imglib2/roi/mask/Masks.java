/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2016 Tobias Pietzsch, Stephan Preibisch, Stephan Saalfeld,
 * John Bogovic, Albert Cardona, Barry DeZonia, Christian Dietz, Jan Funke,
 * Aivar Grislis, Jonathan Hale, Grant Harris, Stefan Helfrich, Mark Hiner,
 * Martin Horn, Steffen Jaensch, Lee Kamentsky, Larry Lindsey, Melissa Linkert,
 * Mark Longair, Brian Northan, Nick Perry, Curtis Rueden, Johannes Schindelin,
 * Jean-Yves Tinevez and Michael Zinsmaier.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imglib2.roi.mask;

import net.imglib2.RealLocalizable;
import net.imglib2.RealRandomAccess;
import net.imglib2.realtransform.AffineGet;
import net.imglib2.roi.mask.real.DefaultMaskAffineTransform;
import net.imglib2.roi.mask.real.MaskAffineTransform;

/**
 * Utility class for working with {@link Mask}s.
 *
 * @author Curtis Rueden
 * @author Alison Walter
 */
public final class Masks
{

	private Masks()
	{
		// NB: Prevent instantiation of utility class.
	}

	public static <L> Mask<L> not( final Mask<L> operand )
	{
		return new DefaultNot<>( operand );
	}

	public static <L> Mask<L> and( final Mask<L> leftOperand, final Mask<L> rightOperand )
	{
		return new DefaultAnd<>( leftOperand, rightOperand );
	}

	public static <L> Mask<L> or( final Mask<L> leftOperand, final Mask<L> rightOperand )
	{
		return new DefaultOr<>( leftOperand, rightOperand );
	}

	public static <L> Mask<L> subtract( final Mask<L> leftOperand, final Mask<L> rightOperand )
	{
		return new DefaultSubtract<>( leftOperand, rightOperand );
	}

	public static <L> Mask<L> xor( final Mask<L> leftOperand, final Mask<L> rightOperand )
	{
		return new DefaultXor<>( leftOperand, rightOperand );
	}

	/**
	 * See a {@link Mask} as transformed by an {@link AffineGet}.
	 * The {@link AffineGet} is interpreted according to the natural
	 * understanding that the source is transformed by it. E.g. a positive
	 * translation of dimension <em>x</em> would shift the source to the right.
	 * Therefore, the samples need to be generated by the inverse of the
	 * {@link AffineGet}. Here, the {@link AffineGet} is inverted using it's
	 * {@link AffineGet#inverse()} method that is expected to generate an
	 * inverse that changes with the original transformation accordingly. That
	 * way, changing the state of the {@link AffineGet} will immediately change
	 * the state of any new {@link RealRandomAccess} generated by the view.
	 *
	 * @param operand
	 *            the {@link Mask} to be transformed
	 * @param transformFromSource
	 *            the {@link AffineGet} transforming source coordinates to
	 *            coordinates of the returned {@link Mask}
	 *
	 * @return {@link MaskAffineTransform} representing the transformed source
	 */
	public static Mask<RealLocalizable> affine( final Mask<RealLocalizable> operand, final AffineGet transformFromSource )
	{
		return new DefaultMaskAffineTransform( operand, transformFromSource.inverse() );
	}
}
